渲染层和数据相关
逻辑层负责产生、处理数据
逻辑层通过Page实例的setData方法传递数据到渲染层

小程序的渲染层和逻辑层分别由2个线程管理:
  渲染层的界面使用了WebView进行渲染;
  逻辑层采用JsCore线程运行JS脚本.

一个小程序存在多个界面,所以渲染层存在多个WebView线程,这两个线程的通信会经由微信客户端做中转,逻辑层发送网络请求也经由Native转发.

<view>
  <view>a</view>
  <view>b</view>
  <view>c</view>
</view>

{
  name:"view",
  children:[
    {
      name:"view",
      children:[
        {text:"a"}
      ]
    },
    {
      name:"view",
      children:[
        {text:"b"}
      ]
    },
    {
      name:"view",
      children:[
        {text:"c"}
      ]
    }
  ]
}

直接修改Page实例的this.data 而不调用this.setData是无法改变页面的状态的,还会造成数据不一致
由于setData是需要两个线程的一些通信消耗,为了提高性能,每次设置的数据不应超过1024kB
不用把data中的任意一项的value设为undefined,否则可能会引起一些不可预料的bug

渲染界面的技术有三种:
  用纯客户端原生技术来渲染
  用纯Web技术来渲染
  介于客户端原生技术与Web技术之间的,互相结合各自特点的技术(Hybrid)技术来渲染

视图层在接收到初始数据(data)和更新数据(setData)时,需要进行视图层渲染.
在一个页面的生命周期中,视图层会收到一份初始数据和多份更新数据.
收到初始数据时需要执行初始渲染,每次收到更新数据时需要执行重渲染.

初始渲染发生在页面刚刚创建时.初始渲染时,将初始数据套用在对应的WXML片段上生成节点树.
节点树也就是在开发者工具WXML面板中看到的页面树结构,它包含页面内所有组件节点的名称、属性值和事件回调函数等信息.
最后根据节点树包含的各个节点,在界面依次创建出各个组件.

在整个流程中,时间开销大体上与节点树中节点的总量成正比例关系.因而减少WXML中节点的数量可以有效降低初始渲染和重渲染的时间开销,提升渲染性能.

<view data-my-data="{{myData}}">
  <view class="my-class" data-my-data="{{myData}}" bindtap="onTap">
    <text>
      {{myText}}
    </text>
  </view>
</view>

<view class="my-class" data-my-data="{{myData}}" bindtap="onTap">
  {{myText}}
</view>

初始渲染完毕后,视图层可以多次应用setData的数据.每次应用setData数据时,都会执行重渲染来更新界面.
初始渲染中得到的data和当前节点树会保留下来用于重渲染.每次重渲染时,将data和setData数据套用在WXML片段上,得到一个新节点树.
然后将新节点树与当前节点树进行比较,这样可以得到哪些节点的哪些属性需要更新、哪些节点需要添加或移除.
最后,将setData数据合并到data中,并用新节点树替换旧节点树,用于下一次重渲染.

在进行当前节点树与新节点树的比较时,会着重比较setData数据影响到的节点属性.因而,去掉不必要设置的数据、减少setData的数据量也有助于提升这一个步骤的性能.

一些原生组件支持使用context来更新组件.不同于setData,使用context来更新组件并不会涉及到重渲染过程,数据通信过程也不同.
在setData的数据通信流程中,数据从逻辑层经过native层转发,传入视图层的WebView,再经过一系列渲染步骤之后传入组件.
而使用context时,数据从逻辑层传到native层后,直接传入组件中,这样可以显著降低传输延迟.