现在有五款主要的浏览器：Internet Explorer、Firefox、Safari、Chrome和Opera。
浏览器的主要功能是展现你所需要的web资源，它从服务器端请求资源并显示在浏览器窗口上，
资源格式一般为html，但是也可以是pdf，image或者其他的格式。
资源的地址是由用户同规格URI(统一资源定位符)来指定的。
浏览器的主要结构如下：
  1.用户界面-包括地址栏、后退/前进按钮、书签菜单等
  2.浏览器引擎-询问和操作渲染引擎的接口
  3.渲染引擎-负责展现所请求的内容，比如如果请求的是html，它就负责解析html和css并且在屏幕上曾宪解析后的内容。
  4.网络模块-网络请求用，比如http请求。它有跨平台的接口以及对应于每个平台的底层实现。
  5.UI后端-用来绘制基本构件，如下拉框和窗口。UI后端暴露出一个平台无关性的公共接口，底层的它使用操作系统的UI方法。
  6.javascript解释器-用来解析和执行javascript代码。
  7.数据存储-这是一个可存储的曾。浏览器需要在硬盘上保存各种数据，比如cookies。

我们提到的浏览器-Firefox、Charome和Safari基于两个渲染引擎。
Firefox使用Geokeo——一个Mozilla自制的渲染引擎，
Safari和Chrome都是用webkit。
Webkit是源于linux平台的一个开源渲染引擎。

渲染引擎开始会从网络模块获取要请求的文档内容,一般会以8K大小的区块获取.
渲染引擎开始解析HTML文档,并且把标签转换成"内容树"上的DOM节点,然后会解析样式,包括外部的css文件和style元素里的数据.
这些样式信息将会和HTML中视觉性的属性组合在一起创建另一个树--渲染树
渲染树由带有颜色和大小等视觉属性的矩形区域构成,这些矩形区域按它们将要显示在屏幕上的顺序排列.
渲染树构造完成后,进入到布局阶段,会把每个节点精确地调整到它应该在屏幕上出现的位置行.
下一步是绘制,渲染树将会被遍历,每个节点都会通过UI后端层来绘制.
为了有更好的用户体验,渲染引擎将会尽可能早的把内容在屏幕上显示出来,不会等到所有的HTML都被解析完才开始建造和布局渲染树,当进程还在继续解析源源不断的来自网络的内容的时候,一部分内容会被解析并且显示出来.

解析文档的意思是把文档转成有意义的一些结构-代码能够理解并且使用的东西,解析后的结果通常是一个能表现文档结构的节点树,叫做解析树或者语法树